# 1 "pfx/basic/lexer.mll"
 
  open Parser
  open Utils
   let mk_int nb loc =
    try INT (int_of_string nb)
    with Failure _ -> raise (Location.Error(Printf.sprintf "Illegal integer '%s': " nb,loc))

# 10 "pfx/basic/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\000\000\000\000\001\000\000\000\002\000\002\000\010\000\
    \001\000\253\255\006\000\255\255\001\000\006\000\004\000\006\000\
    \000\000\250\255\245\255\003\000\249\255\004\000\248\255\001\000\
    \001\000\247\255\011\000\244\255\001\000\246\255\000\000\243\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\001\000\255\255\000\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\013\000\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\000\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\010\000\011\000\011\000\010\000\012\000\010\000\010\000\
    \255\255\000\000\010\000\255\255\010\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\013\000\000\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\026\000\025\000\004\000\028\000\019\000\020\000\
    \017\000\021\000\000\000\000\000\031\000\001\000\029\000\000\000\
    \006\000\014\000\002\000\003\000\018\000\030\000\024\000\015\000\
    \023\000\016\000\022\000\027\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\012\000\000\000\000\000\000\000\010\000\
    \013\000\255\255\010\000\013\000\010\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\010\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\008\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\023\000\024\000\000\000\002\000\005\000\019\000\
    \016\000\004\000\255\255\255\255\030\000\000\000\028\000\255\255\
    \000\000\006\000\000\000\000\000\014\000\001\000\003\000\006\000\
    \003\000\015\000\021\000\026\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\013\000\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 19 "pfx/basic/lexer.mll"
            ( token lexbuf )
# 121 "pfx/basic/lexer.ml"

  | 1 ->
# 21 "pfx/basic/lexer.mll"
            ( token lexbuf )
# 126 "pfx/basic/lexer.ml"

  | 2 ->
# 23 "pfx/basic/lexer.mll"
             ( EOF )
# 131 "pfx/basic/lexer.ml"

  | 3 ->
# 26 "pfx/basic/lexer.mll"
                            ( token lexbuf )
# 136 "pfx/basic/lexer.ml"

  | 4 ->
let
# 28 "pfx/basic/lexer.mll"
              nb
# 142 "pfx/basic/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 28 "pfx/basic/lexer.mll"
                           ( mk_int nb (Location.curr lexbuf))
# 146 "pfx/basic/lexer.ml"

  | 5 ->
# 30 "pfx/basic/lexer.mll"
             (PUSH)
# 151 "pfx/basic/lexer.ml"

  | 6 ->
# 31 "pfx/basic/lexer.mll"
             (ADD)
# 156 "pfx/basic/lexer.ml"

  | 7 ->
# 32 "pfx/basic/lexer.mll"
             (DIV)
# 161 "pfx/basic/lexer.ml"

  | 8 ->
# 33 "pfx/basic/lexer.mll"
             (SUB)
# 166 "pfx/basic/lexer.ml"

  | 9 ->
# 34 "pfx/basic/lexer.mll"
             (REM)
# 171 "pfx/basic/lexer.ml"

  | 10 ->
# 35 "pfx/basic/lexer.mll"
             (POP)
# 176 "pfx/basic/lexer.ml"

  | 11 ->
# 36 "pfx/basic/lexer.mll"
             (SWAP)
# 181 "pfx/basic/lexer.ml"

  | 12 ->
# 37 "pfx/basic/lexer.mll"
             (MUL)
# 186 "pfx/basic/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

