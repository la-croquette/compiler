AUTHORS
-------

- NAME1 Laís Ribeiro
- NAME2 ZHAN NING
…

===============

Description of the project
--------------------------

This μ-project is a very simple compiler…

===============

Sources
-------

Git repository: https://github.com/la-croquette/compiler

===============

How to…
-------

…retrieve the sources?

  git clone https://github.com/la-croquette/compiler

…compile?

  dune build

…execute and test?

  dune utop and then use the libraries
  For the Ex4, We need to test it like :
  (from project root) 
  dune build;;
  dune utop;;
  BasicPfx.Eval.eval_program (2,[BasicPfx.Ast.Add])[1;2];;
  or
  (from project root) 
  dune build
  dune exec expr/main.exe -- expr/basic/tests/an_example.expr
  For the Ex5, We need to test it like :
  (from project root) 
  dune build
  dune exec ./expr/compiler.exe -- ./expr/basic/tests/an_example.expr
  For the Ex6 et Ex8, We need to test it like :
  (from project root) 
  dune exec ./pfx/pfxVM.exe  -- pfx/basic/tests/ok_prog.pfx


===============

Structure of the project
------------------------

The project is organized as following:

Explain here the organization of your project, what is the use of each file or
group of files, etc.

You may also show the file tree as the following example:

project
├── README
├── dune-project
├── expr: the expr compiler
│   ├── README
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── tests: for tests
│   │   │   └── an_example.expr
│   │   ├── toPfx.ml             <- For the Ex5, We have worked here, to define the function "generate" .
│   │   └── toPfx.mli
│   ├── common
│   │   ├── binOp.ml
│   │   ├── binOp.mli
│   │   └── dune
│   ├── compiler.ml: main file for the expr compiler
│   ├── dune
│   ├── fun: the expr parser for section 7
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── lexer.mll
│   │   └── parser.mly
│   └── main.ml
├── pfx: the pfx VM
│   ├── basic
│   │   ├── ast.ml               <- For the Ex4, to define the type commande
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml              <- For the Ex4, to define the function step
│   │   ├── eval.mli
│   │   ├── lexer.mll            <- To edit
│   │   ├── parser.mly           <- To edit
│   │   └── tests: for tests
│   │       └── ok_prog.pfx
│   └── pfxVM.ml: main file for the pfx VM
└── utils
    ├── dune
    ├── location.ml: module offering a data type for a location in a file
    └── location.mli
===============

Progress
--------

- We stopped at question 10.1 (proof of derivation)
- There is still a bug in question 8.3 (new version of generate function)
- …

===============

Know bugs and issues
--------------------

- We were not able to manage xxx…
- Compiler fails when xxx…
- …

===============

Helpful resources
-----------------

- we used Stack Overflow to solve the problem of xxx :
  https://stackoverflow/xxxxxxi
  https://stackoverflow/yyyyyy
- someone on GitHub provided an interesting example very similar to the answer of the question x.y : https://github.com/xxxx
- …

===============

Difficulties
------------

- team programming: having to use a VCS such as git and avoiding conflicts
- thinking functional
- changing habits by using an unknown language
- Not a single difficulty: the project was so easy that my 8-old brother did it
  completely; the Ocaml language is so nice I enjoyed the project, …
- …

