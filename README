AUTHORS
-------

- NAME1 Laís Ribeiro
- NAME2 ZHAN NING
…

===============

Description of the project
--------------------------

This μ-project is a very simple compiler…

===============

Sources
-------

Git repository: https://github.com/la-croquette/compiler

===============

How to…
-------

…retrieve the sources?

  git clone https://github.com/la-croquette/compiler

…compile?

  dune build

…execute and test?

  dune utop and then use the libraries
  For the Ex4, We need to test it like :
  (from project root) 
  dune build;;
  dune utop;;
  BasicPfx.Eval.eval_program (2,[BasicPfx.Ast.Add])[1;2];;
  or
  (from project root) 
  dune build
  dune exec expr/main.exe -- expr/basic/tests/an_example.expr

  For the Ex5, We need to test it like :
  (from project root) 
  dune build
  dune exec ./expr/compiler.exe -- ./expr/basic/tests/an_example.expr
  
  For the Ex6 et Ex8, We need to test it like :
  (from project root) 
  dune exec ./pfx/pfxVM.exe  -- pfx/basic/tests/ok_prog.pfx


===============

Structure of the project
------------------------

The project is organized as following:

Explain here the organization of your project, what is the use of each file or
group of files, etc.
You may also show the file tree as the following example:

project
├── README
├── dune-project
├── expr: the expr compiler
│   ├── README
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── tests: for tests
│   │   │   └── an_example.expr
│   │   ├── toPfx.ml             <- For the Ex5, We have worked here, to define the function "generate" .
│   │   └── toPfx.mli
│   ├── common
│   │   ├── binOp.ml
│   │   ├── binOp.mli
│   │   └── dune
│   ├── compiler.ml: main file for the expr compiler
│   ├── dune
│   ├── fun: the expr parser for section 7
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── lexer.mll
│   │   └── parser.mly
│   └── main.ml
├── pfx: the pfx VM
│   ├── basic
│   │   ├── ast.ml               <- For the Ex4, to define the type commande
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml              <- For the Ex4, to define the function step
│   │   ├── eval.mli
│   │   ├── lexer.mll            <- For the Ex6, we define a lexer, to translate input Stream to some tokens.
│   │   ├── parser.mly           <- For the Ex8, we define a parser, to translate tokens to Ast.program
│   │   └── tests: for tests
│   │       └── ok_prog.pfx
│   └── pfxVM.ml: main file for the pfx VM
└── utils
    ├── dune
    ├── location.ml: module offering a data type for a location in a file
    └── location.mli
===============

Progress
--------


- We stopped at question 10.1 (proof of derivation)
- There is still a bug in question 7, with the codes I write, No results given, so I have treated is as commentary.

- Our progress was a little limited according to our capabilities in the subject, so we couldn't finish everything it was proposed to us.
- We stopped at question 9. We did the theorical part, but we didn't have the time to implement it successfully on the code.


===============


===============

Helpful resources
-----------------

- Ocaml Documentation : https://www.ocaml.org/docs
- Dune Documentation : https://dune.readthedocs.io/en/stable/index.html
- Errors debugging and documentation : https://stackoverflow.com/ && https://chat.openai.com/chat
- OCaml - Lexer and parser generators (ocamllex, ocamlyacc) https://ocaml.org/manual/lexyacc.html
===============

Difficulties
------------


- We can not understand very the Sujet in Englsih, so we spending a lot of time in researching in the official site of Ocaml.
- Difficulties in communication, NING is chinese, Lais comes from Brazil, we can not speak excenllent French. 
So we seperate the work with Math for Lais and Coding for NING. But sure, we often exchange progress, results, and complement each other's parts.
- changing habits by using an unknown language
- the Ocaml language is so nice we enjoyed the project, we love it, we understand better how a compiler work, 
it will help us coding with Java/Matalab in the future. 
